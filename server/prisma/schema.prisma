// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Taxonomy models for categories/subcategories
model Category {
  id         String        @id @default(cuid())
  slug       String        @unique
  nameEn     String
  nameAr     String
  sortOrder  Int           @default(0)
  isActive   Boolean       @default(true)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  subcategories Subcategory[]

  @@map("categories")
}

model Subcategory {
  id          String   @id @default(cuid())
  categoryId  String
  slug        String
  nameEn      String
  nameAr      String
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, slug])
  @@map("subcategories")
}

model User {
  id            String   @id @default(cuid())
  role          String   // "user" | "provider" | "admin"
  subrole       String?  // "individual" | "company" (for providers)
  email         String   @unique
  phone         String   @unique
  username      String?  @unique
  phoneVerified Boolean  @default(false)
  passwordHash  String
  lang          String   @default("en")
  status        String   @default("active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  profile       Profile?
  provider      Provider?
  documents     Document[]
  auditLogs     AuditLog[]
  services      Service[]
  products      Product[]
  auctions      Auction[]
  bids          Bid[]
  buyerOrders   Order[]    @relation("BuyerOrders")
  providerOrders Order[]   @relation("ProviderOrders")
  orderItems    OrderItem[]
  sentMessages  Message[]  @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  notifications Notification[]
  favorites     Favorite[]
  cartItems     CartItem[]
  postRequests  PostRequest[]
  // Added relations for company modules
  calendarEvents CalendarEvent[]
  customerProfiles CustomerProfile[]
  payouts      Payout[]
  
  @@map("users")
}

model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  firstName   String
  lastName    String
  governorate String?
  area        String?
  block       String?
  street      String?
  houseNumber String?
  bio         String?
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  User        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
}

model Provider {
  userId              String   @id
  brandName           String
  divisions           String   // "services" | "products" | "both" (stored as JSON string)
  categories          String   // JSON string of categories
  workHours           String?
  serviceRadiusKm     Int?
  verificationStatus  String   @default("pending_verification") // "pending_verification" | "active" | "rejected"
  verifiedAt          DateTime?
  rejectionReason     String?
  crNumber            String?  // Commercial Registration Number
  // taxNumber removed per requirements
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  User                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("providers")
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "civil_id_front" | "civil_id_back" | "license" | "articles_of_incorporation" | "signature_authorization" | "partner_civil_id"
  filename  String
  originalName String
  mimeType  String
  size      Int      // in bytes
  url       String
  status    String   @default("uploaded") // "uploaded" | "approved" | "rejected"
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

model Otp {
  id         String   @id @default(cuid())
  phone      String
  codeHash   String
  expiresAt  DateTime
  attempts   Int      @default(0)
  createdAt  DateTime @default(now())
  
  @@map("otps")
}

model AuditLog {
  id         String   @id @default(cuid())
  providerId String
  action     String   // "submitted" | "approved" | "rejected" | "reupload"
  actorId    String?  // admin id
  reason     String?
  createdAt  DateTime @default(now())
  
  // Relations
  User      User     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

// New models for marketplace functionality

model Service {
  id          String   @id @default(cuid())
  providerId  String
  title       String
  description String
  category    String
  subcategory String?
  price       Float
  currency    String   @default("KWD")
  governorate String
  area        String
  latitude    Float?
  longitude   Float?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  provider    User     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  orders      OrderItem[]
  
  @@map("services")
}

model Product {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  description String
  category    String
  subcategory String?
  price       Float
  originalPrice Float?
  currency    String   @default("KWD")
  condition   String   // "new" | "used" | "refurbished"
  stock       Int      @default(0)
  governorate String
  area        String
  latitude    Float?
  longitude   Float?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  provider    User     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  cartItems   CartItem[]
  
  @@map("products")
}

model Auction {
  id            String   @id @default(cuid())
  providerId    String
  title         String
  description   String
  category      String
  subcategory   String?
  startPrice    Float
  currentPrice  Float
  minIncrement  Float
  reservePrice  Float?
  buyNowPrice   Float?
  startTime     DateTime
  endTime       DateTime
  antiSniping   Boolean  @default(false)
  governorate   String
  area          String
  latitude      Float?
  longitude     Float?
  status        String   @default("active") // "active" | "ended" | "cancelled"
  isFeatured    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  provider      User     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  bids          Bid[]
  
  @@map("auctions")
}

model Bid {
  id        String   @id @default(cuid())
  auctionId String
  bidderId  String
  amount    Float
  isProxy   Boolean  @default(false)
  maxAmount Float?   // for proxy bidding
  createdAt DateTime @default(now())
  
  // Relations
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  
  @@map("bids")
}

model Order {
  id            String   @id @default(cuid())
  buyerId       String
  providerId    String
  orderNumber   String   @unique
  status        String   @default("requested") // "requested" | "in_chat" | "in_progress" | "completed" | "cancelled"
  totalAmount   Float
  currency      String   @default("KWD")
  governorate   String
  area          String
  street        String?
  building      String?
  floor         String?
  apartment     String?
  notes         String?
  cancelledAt   DateTime?
  refundAmount  Float?
  refundReason  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  buyer         User     @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade)
  provider      User     @relation("ProviderOrders", fields: [providerId], references: [id], onDelete: Cascade)
  items         OrderItem[]
  messages      Message[]
  
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  buyerId   String
  type      String   // "service" | "product"
  itemId    String   // service or product id
  quantity  Int      @default(1)
  unitPrice Float
  totalPrice Float
  createdAt DateTime @default(now())
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  buyer     User     @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  service   Service? @relation(fields: [itemId], references: [id])
  product   Product? @relation(fields: [itemId], references: [id])
  
  @@map("order_items")
}

model Message {
  id        String   @id @default(cuid())
  senderId  String
  receiverId String
  orderId   String?
  content   String
  type      String   @default("text") // "text" | "image" | "file"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  
  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "order_update" | "bid_outbid" | "new_message" | "verification_status" | "system"
  title     String
  body      String
  deepLink  String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// Calendar events per provider (company)
model CalendarEvent {
  id         String   @id @default(cuid())
  providerId String
  title      String
  date       String   // YYYY-MM-DD for quick range queries in SQLite
  time       String   // HH:mm
  technician String?
  branch     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  provider   User     @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

// Minimal customers projection for CRM (denormalized for demo)
model CustomerProfile {
  id        String   @id @default(cuid())
  providerId String
  name      String
  orders    Int      @default(0)
  rating    Float?
  segments  String?  // JSON array
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  provider  User     @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("customer_profiles")
}

// Finance summary artifacts
model Payout {
  id        String   @id @default(cuid())
  providerId String
  amount    Float
  status    String   @default("pending") // pending | paid | failed
  date      String
  createdAt DateTime @default(now())

  provider  User     @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("payouts")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "service" | "product" | "auction"
  itemId    String
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("favorites")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("cart_items")
}

model PostRequest {
  id          String   @id @default(cuid())
  buyerId     String
  type        String   // "service" | "product"
  category    String
  subcategory String?
  description String
  governorate String
  area        String
  latitude    Float?
  longitude   Float?
  isPremium   Boolean  @default(false)
  status      String   @default("active") // "active" | "closed" | "expired"
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  buyer       User     @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  
  @@map("post_requests")
}

// Seed data for admin user
model AdminSeed {
  id        String   @id @default(cuid())
  email     String   @unique
  passwordHash String
  createdAt DateTime @default(now())
  
  @@map("admin_seeds")
}
